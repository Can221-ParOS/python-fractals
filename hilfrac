#!/usr/bin/env python

import turtle
from turtle import *

## Create the initial fractal pattern to draw shapes with ##
def drawHil(t, order, size):
    if order == 0:
        t.forward(size)
    else:
        t.left(90)
        drawHil(t, order-1, size/3)
        t.right(90)
        drawHil(t, order-1, size/3)
        drawHil(t, order-1, size/3) 
        t.right(90)
        drawHil(t, order-1, size/3)
        t.left(90)

## Create geometric shapes using the initial fractal pattern ##
def drawHil2(t, order, size):
    drawHil(t, order, size)
    t.right(90)
    drawHil(t, order, size)
    t.right(90)
    drawHil(t, order, size)
    t.right(90)
    drawHil(t, order, size)

def drawoct(t, order, size):
    drawHil(t, order, size)
    t.right(60)
    drawHil(t, order, size)
    t.right(60)
    drawHil(t, order, size)
    t.right(60)
    drawHil(t, order, size)
    t.right(60)
    drawHil(t, order, size)
    t.right(60)
    drawHil(t, order, size)

## Setup the screen and window ##
screen = Screen()
screen.setup(640,640)
screen.title('Hilbert Curve Fractal')
screen.bgcolor('#333333')
## Set line parameters for each pattern ##
t = turtle.Turtle()
t.hideturtle()
t.speed(0)
t.color('#CC3333')
t2 = turtle.Turtle()
t2.hideturtle()
t2.speed(0)
t2.color('#FF8243')
t3 = turtle.Turtle()
t3.hideturtle()
t3.speed(0)
t3.color('#DF00FF')

## Draw multiple different instances of the same patterns, creating a more ##
## complex pattern ##
drawHil2(t2, 3, 400)
drawHil2(t2, 3, 400)
drawHil2(t2, 3, 400)
drawHil2(t2, 3, 400)
drawoct(t3, 3,  400)
drawoct(t3, 3,  400)
drawoct(t3, 3,  400)
drawoct(t3, 3,  400)
drawoct(t3, 3,  400)
drawoct(t3, 3,  400)
drawHil2(t, 3, 700)
drawHil2(t, 3, 700)
drawHil2(t, 3, 700)
drawHil2(t, 3, 700)
## Make the window stay open until exit ##
turtle.mainloop()



